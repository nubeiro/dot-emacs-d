* init.el

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- emacs config
#+END_SRC
 
** UI
Hide scroll bar
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'horizontal-scroll-bar-mode) (horizontal-scroll-bar-mode -1))  
#+END_SRC

Hide tool bar
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

Hide menu bar
#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

Get a simple starting screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
      initial-scratch-message ""
      initial-major-mode 'fundamental-mode
      inhibit-splash-screen t)
#+end_src

Highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

Enable column numbers
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

Enable line numbers for programming modes
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Transparency
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 70))
(add-to-list 'default-frame-alist '(alpha 95 70))
#+END_SRC

*** Font and window size 
Use dank mono
#+begin_src emacs-lisp
  (set-face-attribute 'default nil 
         :font "Dank Mono"
         :height 185
         :weight 'normal
         :width 'normal)
#+end_src
Set window size
#+begin_src emacs-lisp
(setq initial-frame-alist
      '((width . 140)   ; characters in a line
        (height . 38))) ; number of lines
(setq default-frame-alist
      '((width . 140)   ; characters in a line
        (height . 38))) ; number of lines
#+end_src
*** Delete selection with keypress
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src
*** Enable short answers
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Cleanup trailing whitespace on save
#+begin_src 
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
*** Cursor blinks
#+begin_src emacs-lisp
(blink-cursor-mode t)
#+end_src

** Language and encoding
Prefer utf-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

Setup language env to use utf8
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC
Default coding systems to utf8
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
#+END_SRC

** Custom
Set location of custom file
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "~/.config/emacs/custom.el"))
#+END_SRC
Load custom file
#+BEGIN_SRC emacs-lisp
  (load custom-file)
#+END_SRC

** Package manager
Bootstrap use-package
#+BEGIN_SRC emacs-lisp
(require 'package)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
Report loading and configuration
#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src
Always ensure packages are installed when running on a non-guix system.

#+begin_src emacs-lisp
(unless (file-exists-p "/gnu/store")
  (require 'use-package-ensure)
  (setq use-package-always-ensure t))
#+end_src

Diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Mac OS X
Use $PATH from shell
#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-variables
        '("CHROME_EXECUTABLE"
          "EDITOR"
          "GOOGLE_APPLICATION_CREDENTIALS"
          "MANPATH"
          "METALS_JAVA_OPTS"
          "METALS_JDK_PATH"
          "NPM_PACKAGES"
          "NUCLI_HOME"
          "NUCLI_PY_FULL"
          "NU_COUNTRY"
          "NU_HOME"
          "PATH"
          "SPARK_HOME"
          "XDG_CONFIG_DIRS"
          "XDG_DATA_DIRS"))
    (exec-path-from-shell-initialize)))
#+end_src

Setup alt and meta
#+begin_src emacs-lisp

  (when (memq window-system '(mac ns))
    (setq mac-option-key-is-meta t)
    (setq mac-right-option-modifier nil))
#+end_src

Avoid creating new workspace when going full screen

#+begin_src emacs-lisp
  (setq ns-use-native-fullscreen nil)
#+end_src

** Theme 
#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (customize-set-variable 'frame-background-mode 'dark)
    (load-theme 'solarized-dark t))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

** Keybindings
** Elixir
#+begin_src emacs-lisp
  (use-package elixir-mode
  :bind (:map elixir-mode-map
              ("C-c C-f" . elixir-format)))
#+end_src

** Company mode (autocomplete)
#+begin_src emacs-lisp
  (use-package company
  :defer 1
  :init
  (global-company-mode)
  ;; No delay in showing suggestions.
  (setq company-idle-delay 0)
  ;; Show suggestions after entering one character.
  (setq company-minimum-prefix-length 1)
  ;; If enabled, selecting item before first or after last wraps around.
  (setq company-selection-wrap-around t)
  ;; Use tab key to cycle through suggestions.
  (company-tng-configure-default))
#+end_src

First indent, then complete
#+begin_src emacs-lisp
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
#+end_src


** Misc stuff
Short answers
#+begin_src emacs-lisp
  (setq use-short-answers t)
#+end_src

Highlight matching parenthesis when point is on them
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** todo stuff
- review crux, useful functions. https://github.com/bbatsov/crux

** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-search-modle 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode))
#+end_src

** Version Control
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-diff-refine-hunk t)
  :config
  (setq git-commit-fill-column 70))
#+end_src

*** Git Gutter
#+begin_src emacs-lisp
(use-package diff-hl
  :hook (prog-mode . diff-hl-mode))
#+end_src



** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :commands er/expand-region
  :bind ("M-2" . er/expand-region))
#+end_src
